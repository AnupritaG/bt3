// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Bank {
    mapping(address => uint256) public balances; // Mapping of addresses to balance values

    event Deposit(address indexed sender, uint256 amount);
    event Withdrawal(address indexed sender, uint256 amount);

    function createAccount() public {
        require(msg.sender != address(0), "Cannot create account for zero-address owner");
        
        if (balances[msg.sender] == 0) { 
            balances[msg.sender] = 10000;
        }
    }

    function deposit(uint256 _amount) public {
        require(_amount > 0, "_amount must be greater than 0");

        uint256 currentBalance = balances[msg.sender];
        
        // Add the new amount to the existing balance
        balances[msg.sender] += _amount;

        emit Deposit(msg.sender, _amount);
    }

    function withdraw(uint256 _amount) public {
        require(_amount > 0, "_amount must be greater than 0");
        uint256 currentBalance = balances[msg.sender];
        
        // Check if the withdrawal amount is less than or equal to balance
        require(currentBalance >= _amount, "Insufficient funds");

        // Subtract the withdrawn amount from the account's total value
        balances[msg.sender] -= _amount;

        emit Withdrawal(msg.sender, _amount);
    }

    function showBalance() public view returns (uint256) {
        return balances[msg.sender];
    }
}
